Matrix Operation Library program  
Introduction 
Description: Support addition, multiplication, and inversion on dynamic 2D arrays 
of doubles; each operation extends a base interface. 
This C++ program is a Matrix Calculator that performs essential linear algebra 
operations: 
Matrix Addition (A + B) 
Matrix Multiplication (A × B) 
Matrix Inversion (A⁻¹) 
It dynamically handles matrices of any dimensions (as long as they meet 
mathematical requirements) and includes error checking for invalid operations 
1.r1 X c1: Rows & Columns of Matrix A 
2. r2 × c2: Rows & Columns of Matrix B 

1. #include <iostream>  means: Include for input/output operations 
2. #include <cmath>    means: Include for mathematical functions 
3. using namespace std;  means: Use standard namespace to avoid std:: 
prefixes 
here we are creating a matrix with given rows and columns in the 
library 
4. double** createMatrix(int rows, int cols) { 
5. double** matrix = new double*[rows];  means: Allocate array of row 
pointers 
6. for (int i = 0; i < rows; i++) { means: loop for array  
7. matrix[i] = new double[cols];  means: Allocate each row as array of 
doubles 
} 
8. return matrix;  means: Return the created matrix we created or inserted 
} 
9.  for entering values for a matrix we have and that matrix must fill rows - number of rows, cols - number of columns 
10. void enterMatrix(double** matrix, int rows, int cols) { 
11. cout << "Enter " << rows << "x" << cols << " matrix:\n"; The out put that 
ask for entering the rows and columns  
For loop movie in rows and cols 
12. for (int i = 0; i < rows; i++) { 
13. for (int j = 0; j < cols; j++) { 
14. cin >> matrix[i][j];  Means ;Read each element from user input 
} 
} 
} 
15. Here this if conditions in and outer for getting external as out structure 
16.  void printMatrix(double** matrix, int rows, int cols) { 
17. for (int i = 0; i < rows; i++) { 
18. for (int j = 0; j < cols; j++) { 
19. cout << matrix[i][j] << " ";  means:Print each element with space 
} 
20. cout << endl;  use to print a New line after each row 
} 
} 
Adds two matrices of the same dimensions A, B - matrices to add, rows - 
number of rows, cols - number of columns 
21. double** addMatrices(double** A, double** B, int rows, int cols) { means 
new matrix containing the sum 
22. double** result = createMatrix(rows, cols);  know Create result matrix 
done in this loop 
23. for (int i = 0; i < rows; i++) { 
24. for (int j = 0; j < cols; j++) { 
25. result[i][j] = A[i][j] + B[i][j];   Element I and j  addition loop for make 
the structure and shaped result  
} 
} 
26. return result;  Return the sum form the matrix 
} 
For The Multiplies two matrices (A columns must match B rows) r1 - 
rows of A, c1 - cols of A, c2 - cols of B 
27. double** multiplyMatrices(double** A, double** B, int r1, int c1, int c2) { 
28. double** result = createMatrix(r1, c2);  // Create result matrix 
29. for (int i = 0; i < r1; i++) {  both inner and outer loops for will move in all 
corners of matrix A and B 
30. for (int j = 0; j < c2; j++) { 
31. result[i][j] = 0;  variable to contain the counted data form row and cols  
and start from 0 
32. for (int k = 0; k < c1; k++) { 
a. result[i][j] += A[i][k] * B[k][j];  for the  product of row i and 
column j 
} 
} 
} 
33. return result;  Return the product matrix form the loop   
} 
After getting the result Inverts a square matrix using Gaussian elimination 
For the n - size of matrix (n x n)if matrix is singular 
34. double** invertMatrix(double** matrix, int n) { 
Create identity matrix which will become the inverse 
35. double** inverse = createMatrix(n, n); 
36. for (int i = 0; i < n; i++) { 
37. for (int j = 0; j < n; j++) { 
38. inverse[i][j] = (i == j) ? 1.0 : 0.0;  This mean if I equal to j we get 1 
diagonal and 0 else where 
} 
} 
To  Perform Gaussian elimination 
for (int i = 0; i < n; i++) { Find row with maximum element in current 
column for the number to be stable  
39. int maxRow = i; 
40. for (int k = i + 1; k < n; k++) { 
41. if (abs(matrix[k][i]) > abs(matrix[maxRow][i])) { if conditions to matrix 
and matrix of rows to be great  
a. maxRow = k; 
} 
} 
Swap rows if current pivot is not the maximum 
42. if (maxRow != i) { 
43. swap(matrix[i], matrix[maxRow]);     Swap in original matrix 
44. swap(inverse[i], inverse[maxRow]);  Swap in identity matrix 
} 
To Check if matrix is invertible  
45. if (abs(matrix[i][i]) < 1e-10) { 
46. cout << "Matrix cannot be inverted (singular matrix)" << endl; 
47. return nullptr;  the  Return null if matrix is singular 
} 
For Normalize current row by dividing by pivot element 
48. double pivot = matrix[i][i]; 
49. for (int j = 0; j < n; j++) { 
50. matrix[i][j] /= pivot;     
Divide original matrix row 
51. inverse[i][j] /= pivot;    Divide inverse matrix row 
} 
Eliminate other rows 
52. for (int k = 0; k < n; k++) { 
53. if (k != i && abs(matrix[k][i]) > 1e-10) {  Skip current row and zero rows 
double factor = matrix[k][i]; 
for (int j = 0; j < n; j++) { 
matrix[k][j] -= factor * matrix[i][j];     
Eliminate in original 
inverse[k][j] -= factor * inverse[i][j];  Apply same to inverse 
} 
} 
} 
} 
54. return inverse;   show the result of the Return the inverted matrix 
55. } 
56.  The matrix to delete, rows - number of rows in matrix 
57. void deleteMatrix(double** matrix, int rows) { 
58. for (int i = 0; i < rows; i++) { 
59. delete[] matrix[i];  To delete each row 
} 
60. delete[] matrix;   Delete the array of row pointers 
} 
61. int main() { 
62. int r1, c1, r2, c2;  Dimensions for matrices A and B 
Get matrix dimensions from user 
63. cout << "Enter rows and columns for Matrix A: "; 
64. cin >> r1 >> c1; 
65. cout << "Enter rows and columns for Matrix B: "; 
66. cin >> r2 >> c2; 
67. Create matrices form the user of the system  
68. double** A = createMatrix(r1, c1); 
69. double** B = createMatrix(r2, c2); 
Get matrix values from user 
70. cout << "\nEnter Matrix A:\n"; 
71. enterMatrix(A, r1, c1); 
72. cout << "\nEnter Matrix B:\n"; 
73. enterMatrix(B, r2, c2); 
74.  Getting the Menu system 
75. int choice; 
76. do { 
77. cout << "\nMenu:\n"; 
78. cout << "1. Add A + B\n"; 
79. cout << "2. Multiply A × B\n"; 
80. cout << "3. Invert A\n"; 
81. cout << "0. Exit\n"; 
82. cout << "Your choice: "; 
83. cin >> choice; 
84. double** result = nullptr;  Will point to operation result 
85. int resRows = 0, resCols = 0;  Dimensions of result 
86. try { try block is used for error handling becouse Matrix inversion  can 
fail 
87. switch (choice) { use switch to reduce the many if condition 
case 1:  Matrix  for addition addition 
if (r1 != r2 || c1 != c2) { 
cout << "Error: Matrices must be same size for addition\n"; 
break; 
} 
result = addMatrices(A, B, r1, c1); 
resRows = r1; 
resCols = c1; 
break; 
case 2:  Matrix multiplication 
if (c1 != r2) { 
cout << "Error: Columns of A must match rows of B\n"; 
i. break; The end 
} 
result = multiplyMatrices(A, B, r1, c1, c2); 
resRows = r1; 
resCols = c2; 
break; 
case 3:  Matrix  for inversion 
if (r1 != c1) { 
cout << "Error: Matrix A must be square to invert\n"; 
break; 
} 
result = invertMatrix(A, r1); 
if (result) {  Only set dimensions if inversion succeeded 
resRows = r1; 
resCols = r1; 
} 
break; 
case 0:   Exit 
break; 
default: 
cout << "Invalid choice\n"; 
} 
88. Display result if operation was performed 
89. if (result) { 
a. cout << "\nResult:\n"; 
b. printMatrix(result, resRows, resCols); 
c. deleteMatrix(result, resRows);   Clean up result matrix 
90. } 
91. } catch (...) {  Catch any unexpected errors 
92. cout << "An error occurred\n"; 
} 
93. } while (choice != 0);  Continue until user chooses to exit 
94. Here Clean up input matrices 
95. deleteMatrix(A, r1); 
96. deleteMatrix(B, r2); 
97. return 0; Successful program termination 
}
